!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Build_blk_col_type	mpi_io.c	/^MPI_Datatype Build_blk_col_type(int n, int loc_n) {$/;"	f
Dijkstra	dijkstra.c	/^void Dijkstra(int mat[], int dist[], int pred[], int n) {$/;"	f
Find_min_dist	dijkstra.c	/^int Find_min_dist(int dist[], int known[], int n) {$/;"	f
INFINITY	dijkstra.c	/^const int INFINITY = 1000000;$/;"	v
INFINITY	mpi_io.c	52;"	d	file:
MAX_STRING	mpi_io.c	51;"	d	file:
Print_dists	dijkstra.c	/^void Print_dists(int dist[], int n) {$/;"	f
Print_local_matrix	mpi_io.c	/^void Print_local_matrix(int loc_mat[], int n, int loc_n, int my_rank) {$/;"	f
Print_matrix	dijkstra.c	/^void Print_matrix(int mat[], int n) {$/;"	f
Print_matrix	mpi_io.c	/^void Print_matrix(int loc_mat[], int n, int loc_n,$/;"	f
Print_paths	dijkstra.c	/^void Print_paths(int pred[], int n) {$/;"	f
Read_matrix	dijkstra.c	/^void Read_matrix(int mat[], int n) {$/;"	f
Read_matrix	mpi_io.c	/^void Read_matrix(int loc_mat[], int n, int loc_n, $/;"	f
Read_n	mpi_io.c	/^int Read_n(int my_rank, MPI_Comm comm) {$/;"	f
main	dijkstra.c	/^int main(void) {$/;"	f
main	mpi_io.c	/^int main(int argc, char* argv[]) {$/;"	f
